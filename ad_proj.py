# -*- coding: utf-8 -*-
"""ad proj.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/11pv808A992a0DvITwo9R5EPpRmFPHZkt

##1) m

##1) mention about problem statement
##2) talk about columns
##3)install the models and required libraries
##4)load data set
##5)understand your data
##6)EDA
## i)univariate analysis
## ii)Bi-variate analysis
## iii)multivariate analysis
## 7) check the null values or missing values
## i)treating the null values(fill with mean or median or mode)
## ii)drop null values if they are less than 5%-10%
##8)check the duplicates
## i)drop the duplicates
##9)treating the outliers
## i)check the outliers
## ii)remove the outliers
## iii)make box plots before and after outliers
##10)feature engineering
## i)extract the features
## ii)create the features
## iii)select the features
#3 b)checking the multicoliniarity
## i)heat map
## ii)vif technique
## c)transformation
## i)one hor encoding or label encoding
## 11)x-y features split
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df = pd.read_excel(r"/content/online_course_recommendation_v2.xlsx")

df

df.info()

df.shape

df.describe()

df.isnull()

df.isnull().sum()

list(df.columns)

df.dtypes

df.dtypes.values

df.dtypes.tolist()

[dtype.name for dtype in df.dtypes]

df.duplicated().sum()

plt.figure(figsize=(14, 10))
plt.suptitle("Histograms of Online Course Features", fontsize=16)


features = ["course_duration_hours", "rating", "enrollment_numbers", "course_price", "feedback_score", "time_spent_hours", "previous_courses_taken"]
for i, col in enumerate(features):
    plt.subplot(3, 3, i + 1)
    sns.histplot(df[col], bins=20, kde=True, color="blue")
    plt.title(f"Distribution of {col.replace('_', ' ').title()}", fontsize=12)
    plt.xlabel(col.replace('_', ' ').title())
    plt.ylabel("Count")

plt.tight_layout(rect=[0, 0, 1, 0.96])
plt.show()

sns.boxplot(y=df[col], color="green")

plt.figure(figsize=(14, 10))
plt.suptitle("Boxplots of Online Course Features", fontsize=16)
features = ["course_duration_hours", "rating", "enrollment_numbers",
            "course_price", "feedback_score", "time_spent_hours", "previous_courses_taken"]

for i, col in enumerate(features):
    if col not in df.columns:
        print(f"Skipping {col}: Column not found in dataset")
        continue

    plt.subplot(3, 3, i + 1)
    sns.boxplot(y=df[col], color="green")
    plt.title(f"Boxplot of {col.replace('_', ' ').title()}", fontsize=12)
    plt.ylabel(col.replace('_', ' ').title())

plt.tight_layout(rect=[0, 0, 1, 0.96])
plt.show()

df.drop(['user_id'], axis=1, inplace=True)

df

numeric_df = df.select_dtypes(include=["number"])

correlation_matrix = numeric_df.corr()

plt.figure(figsize=(12, 8))
plt.suptitle("Correlation Heatmap of Online Course Features", fontsize=16)

sns.heatmap(correlation_matrix, annot=True, cmap="coolwarm", linewidths=0.5)

plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset
file_path = "/content/online_course_recommendation_v2.xlsx"
df = pd.read_excel(file_path, sheet_name="Sheet1")

# Define price categories
bins = [0, 50, 150, 300, 500, df['course_price'].max() + 1]  # Increased last bin to avoid duplicate edges
labels = ['0-50', '51-150', '151-300', '301-500', '501+']
df['price_category'] = pd.cut(df['course_price'], bins=bins, labels=labels, include_lowest=True)

# Count occurrences in each price range
price_counts = df['price_category'].value_counts()

# Plot pie chart
plt.figure(figsize=(8, 8))
plt.pie(price_counts, labels=price_counts.index, autopct='%1.1f%%', colors=['#ff9999','#66b3ff','#99ff99','#ffcc99','#c2c2f0'])
plt.title('Course Price Distribution')
plt.show()

plt.figure(figsize=(8, 6))
plt.scatter(df['course_price'], df['rating'], alpha=0.5, color='blue')
plt.xlabel('Course Price')
plt.ylabel('Rating')
plt.title('Course Price vs. Rating')
plt.grid(True)
plt.show()

import matplotlib.animation as animation
import numpy as np
import matplotlib.pyplot as plt
from IPython.display import HTML

# Create figure and axis
fig, ax = plt.subplots(figsize=(8, 6))
ax.set_xlim(df['course_price'].min(), df['course_price'].max())
ax.set_ylim(df['rating'].min(), df['rating'].max())
ax.set_xlabel('Course Price')
ax.set_ylabel('Rating')
ax.set_title('Moving Scatter Plot: Course Price vs. Rating')

# Create scatter plot with initial empty data
sc = ax.scatter([], [], alpha=0.5, color='blue')

def update(frame):
    x_data = df['course_price'][:frame].values
    y_data = df['rating'][:frame].values
    sc.set_offsets(np.c_[x_data, y_data])
    return sc,

# Create animation
ani = animation.FuncAnimation(fig, update, frames=len(df), interval=100, repeat=False)

# Display animation in Colab
HTML(ani.to_jshtml())

